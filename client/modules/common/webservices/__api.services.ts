//------------------------------
// <auto-generated>
//     Generated using the swagen tool
// </auto-generated>
//------------------------------
// Swagger Petstore
// This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
// Base URL: http://petstore.swagger.io/v2/

/// <reference path="../../../../typings/index.d.ts"/>
/// <reference path="../../../../typings/app.d.ts"/>

namespace common.webservices {
    import __models = common.webservices.models;

    export interface IpetClient {
        addPet(body: __models.Pet): ng.IPromise<any>;
        updatePet(body: __models.Pet): ng.IPromise<any>;
        findPetsByStatus(status: __models.StatusEnum[]): ng.IPromise<__models.Pet[]>;
        findPetsByTags(tags: string[]): ng.IPromise<__models.Pet[]>;
        getPetById(petId: number): ng.IPromise<__models.Pet>;
        updatePetWithForm(petId: number, name: string, status: string): ng.IPromise<any>;
        deletePet(api_key: string, petId: number): ng.IPromise<any>;
        uploadFile(petId: number, additionalMetadata: string, file: any): ng.IPromise<__models.ApiResponse>;
    }

    export class petClient implements IpetClient {
        private baseUrl: string;

        public static $inject: string[] = ['$http', '$q', 'config'];
        constructor(
            private $http: ng.IHttpService,
            private $q: ng.IQService,
            config?: app.IConfig
        ) {
            this.baseUrl = config.apiBaseUrl;
        }

        /**
         * Add a new pet to the store
         */
        public addPet(body: __models.Pet): ng.IPromise<any> {
            if (body == undefined || body == null) {
                throw 'The parameter \'body\' must be defined.';
            }
            let resourceUrl: string = '/pet';
            return this.$q<any>(
                (resolve: ng.IQResolveReject<any>, reject: ng.IQResolveReject<any>) => {
                    this.$http<any>({
                        data: body,
                        method: 'POST',
                        url: buildServiceUrl(this.baseUrl, resourceUrl, undefined)
                    }).success((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        resolve(data);
                    }).error((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        reject(data);
                    });
                }
            );
        }

        /**
         * Update an existing pet
         */
        public updatePet(body: __models.Pet): ng.IPromise<any> {
            if (body == undefined || body == null) {
                throw 'The parameter \'body\' must be defined.';
            }
            let resourceUrl: string = '/pet';
            return this.$q<any>(
                (resolve: ng.IQResolveReject<any>, reject: ng.IQResolveReject<any>) => {
                    this.$http<any>({
                        data: body,
                        method: 'PUT',
                        url: buildServiceUrl(this.baseUrl, resourceUrl, undefined)
                    }).success((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        resolve(data);
                    }).error((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        reject(data);
                    });
                }
            );
        }

        /**
         * Finds Pets by status
         */
        public findPetsByStatus(status: __models.StatusEnum[]): ng.IPromise<__models.Pet[]> {
            if (status == undefined || status == null) {
                throw 'The parameter \'status\' must be defined.';
            }
            let resourceUrl: string = '/pet/findByStatus';
            let queryParams: {[key: string]: string} = {
                status: encodeURIComponent('' + status)
            };
            return this.$q<__models.Pet[]>(
                (resolve: ng.IQResolveReject<__models.Pet[]>, reject: ng.IQResolveReject<any>) => {
                    this.$http<__models.Pet[]>({
                        method: 'GET',
                        url: buildServiceUrl(this.baseUrl, resourceUrl, queryParams)
                    }).success((data: __models.Pet[], status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        resolve(data);
                    }).error((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        reject(data);
                    });
                }
            );
        }

        /**
         * Finds Pets by tags
         */
        public findPetsByTags(tags: string[]): ng.IPromise<__models.Pet[]> {
            if (tags == undefined || tags == null) {
                throw 'The parameter \'tags\' must be defined.';
            }
            let resourceUrl: string = '/pet/findByTags';
            let queryParams: {[key: string]: string} = {
                tags: encodeURIComponent('' + tags)
            };
            return this.$q<__models.Pet[]>(
                (resolve: ng.IQResolveReject<__models.Pet[]>, reject: ng.IQResolveReject<any>) => {
                    this.$http<__models.Pet[]>({
                        method: 'GET',
                        url: buildServiceUrl(this.baseUrl, resourceUrl, queryParams)
                    }).success((data: __models.Pet[], status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        resolve(data);
                    }).error((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        reject(data);
                    });
                }
            );
        }

        /**
         * Find pet by ID
         */
        public getPetById(petId: number): ng.IPromise<__models.Pet> {
            if (petId == undefined || petId == null) {
                throw 'The parameter \'petId\' must be defined.';
            }
            let resourceUrl: string = '/pet/{petId}'
                .replace('{petId}', encodeURIComponent('' + petId));
            return this.$q<__models.Pet>(
                (resolve: ng.IQResolveReject<__models.Pet>, reject: ng.IQResolveReject<any>) => {
                    this.$http<__models.Pet>({
                        method: 'GET',
                        url: buildServiceUrl(this.baseUrl, resourceUrl, undefined)
                    }).success((data: __models.Pet, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        resolve(data);
                    }).error((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        reject(data);
                    });
                }
            );
        }

        /**
         * Updates a pet in the store with form data
         */
        public updatePetWithForm(petId: number, name: string, status: string): ng.IPromise<any> {
            if (petId == undefined || petId == null) {
                throw 'The parameter \'petId\' must be defined.';
            }
            let resourceUrl: string = '/pet/{petId}'
                .replace('{petId}', encodeURIComponent('' + petId));
            return this.$q<any>(
                (resolve: ng.IQResolveReject<any>, reject: ng.IQResolveReject<any>) => {
                    this.$http<any>({
                        method: 'POST',
                        url: buildServiceUrl(this.baseUrl, resourceUrl, undefined)
                    }).success((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        resolve(data);
                    }).error((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        reject(data);
                    });
                }
            );
        }

        /**
         * Deletes a pet
         */
        public deletePet(api_key: string, petId: number): ng.IPromise<any> {
            if (petId == undefined || petId == null) {
                throw 'The parameter \'petId\' must be defined.';
            }
            let resourceUrl: string = '/pet/{petId}'
                .replace('{petId}', encodeURIComponent('' + petId));
            return this.$q<any>(
                (resolve: ng.IQResolveReject<any>, reject: ng.IQResolveReject<any>) => {
                    this.$http<any>({
                        method: 'DELETE',
                        url: buildServiceUrl(this.baseUrl, resourceUrl, undefined)
                    }).success((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        resolve(data);
                    }).error((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        reject(data);
                    });
                }
            );
        }

        /**
         * uploads an image
         */
        public uploadFile(petId: number, additionalMetadata: string, file: any): ng.IPromise<__models.ApiResponse> {
            if (petId == undefined || petId == null) {
                throw 'The parameter \'petId\' must be defined.';
            }
            let resourceUrl: string = '/pet/{petId}/uploadImage'
                .replace('{petId}', encodeURIComponent('' + petId));
            return this.$q<__models.ApiResponse>(
                (resolve: ng.IQResolveReject<__models.ApiResponse>, reject: ng.IQResolveReject<any>) => {
                    this.$http<__models.ApiResponse>({
                        method: 'POST',
                        url: buildServiceUrl(this.baseUrl, resourceUrl, undefined)
                    }).success((data: __models.ApiResponse, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        resolve(data);
                    }).error((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        reject(data);
                    });
                }
            );
        }
    }

    angular.module('common').service('petClient', petClient);

    export interface IstoreClient {
        getInventory(): ng.IPromise<any>;
        placeOrder(body: __models.Order): ng.IPromise<__models.Order>;
        getOrderById(orderId: number): ng.IPromise<__models.Order>;
        deleteOrder(orderId: number): ng.IPromise<any>;
    }

    export class storeClient implements IstoreClient {
        private baseUrl: string;

        public static $inject: string[] = ['$http', '$q', 'config'];
        constructor(
            private $http: ng.IHttpService,
            private $q: ng.IQService,
            config?: app.IConfig
        ) {
            this.baseUrl = config.apiBaseUrl;
        }

        /**
         * Returns pet inventories by status
         */
        public getInventory(): ng.IPromise<any> {
            let resourceUrl: string = '/store/inventory';
            return this.$q<any>(
                (resolve: ng.IQResolveReject<any>, reject: ng.IQResolveReject<any>) => {
                    this.$http<any>({
                        method: 'GET',
                        url: buildServiceUrl(this.baseUrl, resourceUrl, undefined)
                    }).success((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        resolve(data);
                    }).error((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        reject(data);
                    });
                }
            );
        }

        /**
         * Place an order for a pet
         */
        public placeOrder(body: __models.Order): ng.IPromise<__models.Order> {
            if (body == undefined || body == null) {
                throw 'The parameter \'body\' must be defined.';
            }
            let resourceUrl: string = '/store/order';
            return this.$q<__models.Order>(
                (resolve: ng.IQResolveReject<__models.Order>, reject: ng.IQResolveReject<any>) => {
                    this.$http<__models.Order>({
                        data: body,
                        method: 'POST',
                        url: buildServiceUrl(this.baseUrl, resourceUrl, undefined)
                    }).success((data: __models.Order, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        resolve(data);
                    }).error((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        reject(data);
                    });
                }
            );
        }

        /**
         * Find purchase order by ID
         */
        public getOrderById(orderId: number): ng.IPromise<__models.Order> {
            if (orderId == undefined || orderId == null) {
                throw 'The parameter \'orderId\' must be defined.';
            }
            let resourceUrl: string = '/store/order/{orderId}'
                .replace('{orderId}', encodeURIComponent('' + orderId));
            return this.$q<__models.Order>(
                (resolve: ng.IQResolveReject<__models.Order>, reject: ng.IQResolveReject<any>) => {
                    this.$http<__models.Order>({
                        method: 'GET',
                        url: buildServiceUrl(this.baseUrl, resourceUrl, undefined)
                    }).success((data: __models.Order, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        resolve(data);
                    }).error((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        reject(data);
                    });
                }
            );
        }

        /**
         * Delete purchase order by ID
         */
        public deleteOrder(orderId: number): ng.IPromise<any> {
            if (orderId == undefined || orderId == null) {
                throw 'The parameter \'orderId\' must be defined.';
            }
            let resourceUrl: string = '/store/order/{orderId}'
                .replace('{orderId}', encodeURIComponent('' + orderId));
            return this.$q<any>(
                (resolve: ng.IQResolveReject<any>, reject: ng.IQResolveReject<any>) => {
                    this.$http<any>({
                        method: 'DELETE',
                        url: buildServiceUrl(this.baseUrl, resourceUrl, undefined)
                    }).success((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        resolve(data);
                    }).error((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        reject(data);
                    });
                }
            );
        }
    }

    angular.module('common').service('storeClient', storeClient);

    export interface IuserClient {
        createUser(body: __models.User): ng.IPromise<any>;
        createUsersWithArrayInput(body: __models.User[]): ng.IPromise<any>;
        createUsersWithListInput(body: __models.User[]): ng.IPromise<any>;
        loginUser(username: string, password: string): ng.IPromise<string>;
        logoutUser(): ng.IPromise<any>;
        getUserByName(username: string): ng.IPromise<__models.User>;
        updateUser(username: string, body: __models.User): ng.IPromise<any>;
        deleteUser(username: string): ng.IPromise<any>;
    }

    export class userClient implements IuserClient {
        private baseUrl: string;

        public static $inject: string[] = ['$http', '$q', 'config'];
        constructor(
            private $http: ng.IHttpService,
            private $q: ng.IQService,
            config?: app.IConfig
        ) {
            this.baseUrl = config.apiBaseUrl;
        }

        /**
         * Create user
         */
        public createUser(body: __models.User): ng.IPromise<any> {
            if (body == undefined || body == null) {
                throw 'The parameter \'body\' must be defined.';
            }
            let resourceUrl: string = '/user';
            return this.$q<any>(
                (resolve: ng.IQResolveReject<any>, reject: ng.IQResolveReject<any>) => {
                    this.$http<any>({
                        data: body,
                        method: 'POST',
                        url: buildServiceUrl(this.baseUrl, resourceUrl, undefined)
                    }).success((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        resolve(data);
                    }).error((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        reject(data);
                    });
                }
            );
        }

        /**
         * Creates list of users with given input array
         */
        public createUsersWithArrayInput(body: __models.User[]): ng.IPromise<any> {
            if (body == undefined || body == null) {
                throw 'The parameter \'body\' must be defined.';
            }
            let resourceUrl: string = '/user/createWithArray';
            return this.$q<any>(
                (resolve: ng.IQResolveReject<any>, reject: ng.IQResolveReject<any>) => {
                    this.$http<any>({
                        data: body,
                        method: 'POST',
                        url: buildServiceUrl(this.baseUrl, resourceUrl, undefined)
                    }).success((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        resolve(data);
                    }).error((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        reject(data);
                    });
                }
            );
        }

        /**
         * Creates list of users with given input array
         */
        public createUsersWithListInput(body: __models.User[]): ng.IPromise<any> {
            if (body == undefined || body == null) {
                throw 'The parameter \'body\' must be defined.';
            }
            let resourceUrl: string = '/user/createWithList';
            return this.$q<any>(
                (resolve: ng.IQResolveReject<any>, reject: ng.IQResolveReject<any>) => {
                    this.$http<any>({
                        data: body,
                        method: 'POST',
                        url: buildServiceUrl(this.baseUrl, resourceUrl, undefined)
                    }).success((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        resolve(data);
                    }).error((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        reject(data);
                    });
                }
            );
        }

        /**
         * Logs user into the system
         */
        public loginUser(username: string, password: string): ng.IPromise<string> {
            if (username == undefined || username == null) {
                throw 'The parameter \'username\' must be defined.';
            }
            if (password == undefined || password == null) {
                throw 'The parameter \'password\' must be defined.';
            }
            let resourceUrl: string = '/user/login';
            let queryParams: {[key: string]: string} = {
                username: encodeURIComponent('' + username),
                password: encodeURIComponent('' + password)
            };
            return this.$q<string>(
                (resolve: ng.IQResolveReject<string>, reject: ng.IQResolveReject<any>) => {
                    this.$http<string>({
                        method: 'GET',
                        url: buildServiceUrl(this.baseUrl, resourceUrl, queryParams)
                    }).success((data: string, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        resolve(data);
                    }).error((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        reject(data);
                    });
                }
            );
        }

        /**
         * Logs out current logged in user session
         */
        public logoutUser(): ng.IPromise<any> {
            let resourceUrl: string = '/user/logout';
            return this.$q<any>(
                (resolve: ng.IQResolveReject<any>, reject: ng.IQResolveReject<any>) => {
                    this.$http<any>({
                        method: 'GET',
                        url: buildServiceUrl(this.baseUrl, resourceUrl, undefined)
                    }).success((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        resolve(data);
                    }).error((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        reject(data);
                    });
                }
            );
        }

        /**
         * Get user by user name
         */
        public getUserByName(username: string): ng.IPromise<__models.User> {
            if (username == undefined || username == null) {
                throw 'The parameter \'username\' must be defined.';
            }
            let resourceUrl: string = '/user/{username}'
                .replace('{username}', encodeURIComponent('' + username));
            return this.$q<__models.User>(
                (resolve: ng.IQResolveReject<__models.User>, reject: ng.IQResolveReject<any>) => {
                    this.$http<__models.User>({
                        method: 'GET',
                        url: buildServiceUrl(this.baseUrl, resourceUrl, undefined)
                    }).success((data: __models.User, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        resolve(data);
                    }).error((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        reject(data);
                    });
                }
            );
        }

        /**
         * Updated user
         */
        public updateUser(username: string, body: __models.User): ng.IPromise<any> {
            if (username == undefined || username == null) {
                throw 'The parameter \'username\' must be defined.';
            }
            if (body == undefined || body == null) {
                throw 'The parameter \'body\' must be defined.';
            }
            let resourceUrl: string = '/user/{username}'
                .replace('{username}', encodeURIComponent('' + username));
            return this.$q<any>(
                (resolve: ng.IQResolveReject<any>, reject: ng.IQResolveReject<any>) => {
                    this.$http<any>({
                        data: body,
                        method: 'PUT',
                        url: buildServiceUrl(this.baseUrl, resourceUrl, undefined)
                    }).success((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        resolve(data);
                    }).error((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        reject(data);
                    });
                }
            );
        }

        /**
         * Delete user
         */
        public deleteUser(username: string): ng.IPromise<any> {
            if (username == undefined || username == null) {
                throw 'The parameter \'username\' must be defined.';
            }
            let resourceUrl: string = '/user/{username}'
                .replace('{username}', encodeURIComponent('' + username));
            return this.$q<any>(
                (resolve: ng.IQResolveReject<any>, reject: ng.IQResolveReject<any>) => {
                    this.$http<any>({
                        method: 'DELETE',
                        url: buildServiceUrl(this.baseUrl, resourceUrl, undefined)
                    }).success((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        resolve(data);
                    }).error((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {
                        reject(data);
                    });
                }
            );
        }
    }

    angular.module('common').service('userClient', userClient);

    function buildServiceUrl(baseUrl: string, resourceUrl: string, queryParams?: {[name: string]: string}): string {
        let url: string = baseUrl;
        let baseUrlSlash: boolean = url[url.length - 1] === '/';
        let resourceUrlSlash: boolean = resourceUrl[0] === '/';
        if (!baseUrlSlash && !resourceUrlSlash) {
            url += '/';
        } else if (baseUrlSlash && resourceUrlSlash) {
            url = url.substr(0, url.length - 1);
        }
        url += resourceUrl;

        if (queryParams) {
            let isFirst: boolean = true;
            for (let p in queryParams) {
                if (queryParams.hasOwnProperty(p) && queryParams[p]) {
                    let separator: string = isFirst ? '?' : '&';
                    url += separator + p + '=' + queryParams[p];
                    isFirst = false;
                }
            }
        }

        return url;
    }
}

namespace common.webservices.models {
    export interface Order {
        id: number;
        petId: number;
        quantity: number;
        shipDate: Date;
        status: StatusEnum;
        complete: boolean;
    }
    export interface Category {
        id: number;
        name: string;
    }
    export interface User {
        id: number;
        username: string;
        firstName: string;
        lastName: string;
        email: string;
        password: string;
        phone: string;
        userStatus: number;
    }
    export interface Tag {
        id: number;
        name: string;
    }
    export interface Pet {
        id: number;
        category: Category;
        name: string;
        photoUrls: string[];
        tags: Tag[];
        status: StatusEnum;
    }
    export interface ApiResponse {
        code: number;
        type: string;
        message: string;
    }
}

namespace common.webservices.models {
    export type StatusEnum = 'available'|'pending'|'sold';
}

namespace common.webservices.models {
    export class ModelFactory {
        public static createEmptyOrder(initializer?: (m: Order) => void): Order {
            let model: Order = {
                id: undefined,
                petId: undefined,
                quantity: undefined,
                shipDate: undefined,
                status: undefined,
                complete: false,
            };
            if (!!initializer) {
                initializer(model);
            }
            return model;
        }
        public static createEmptyCategory(initializer?: (m: Category) => void): Category {
            let model: Category = {
                id: undefined,
                name: '',
            };
            if (!!initializer) {
                initializer(model);
            }
            return model;
        }
        public static createEmptyUser(initializer?: (m: User) => void): User {
            let model: User = {
                id: undefined,
                username: '',
                firstName: '',
                lastName: '',
                email: '',
                password: '',
                phone: '',
                userStatus: undefined,
            };
            if (!!initializer) {
                initializer(model);
            }
            return model;
        }
        public static createEmptyTag(initializer?: (m: Tag) => void): Tag {
            let model: Tag = {
                id: undefined,
                name: '',
            };
            if (!!initializer) {
                initializer(model);
            }
            return model;
        }
        public static createEmptyPet(initializer?: (m: Pet) => void): Pet {
            let model: Pet = {
                id: undefined,
                category: ModelFactory.createEmptyCategory(),
                name: '',
                photoUrls: [],
                tags: [],
                status: undefined,
            };
            if (!!initializer) {
                initializer(model);
            }
            return model;
        }
        public static createEmptyApiResponse(initializer?: (m: ApiResponse) => void): ApiResponse {
            let model: ApiResponse = {
                code: undefined,
                type: '',
                message: '',
            };
            if (!!initializer) {
                initializer(model);
            }
            return model;
        }
    }
}